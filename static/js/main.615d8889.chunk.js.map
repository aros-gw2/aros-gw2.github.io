{"version":3,"sources":["components/DetailedMatchupStats/index.js","components/WorldSelector/index.js","components/MatchupLog/index.js","components/MatchupStats/index.js","components/Options/index.js","gw2apiModels/Gw2Worlds.js","lib/RequestHandler.js","gw2apiModels/Gw2Guild.js","components/Objectives/Objective.js","components/ObjectiveTooltip/index.js","components/Objectives/Camp.js","components/Objectives/Tower.js","components/Objectives/Keep.js","components/Objectives/Castle.js","App.js","serviceWorker.js","index.js"],"names":["Transition","props","react_default","a","createElement","Slide_default","Object","assign","direction","Component","style","selectorContainer","position","top","left","padding","background","borderBottomRightRadius","textAlign","color","fontSize","worldContainer","minWidth","zIndex","WorldSelector","_this$props","this","worlds","world","setWorld","linkedWorlds","worldMenuItems","worldId","push","key","value","name","worldNamesGreen","green","map","index","worldNamesBlue","blue","worldNamesRed","red","homeServer","src","alt","verticalAlign","width","marginRight","spanStyle","lineHeight","textShadow","className","join","FormControl_default","variant","Select_default","native","onChange","e","target","logContainer","bottom","right","maxHeight","overflowY","MatchupLog","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","maps","BlueHome","GreenHome","RedHome","Center","dateObj","Date","getHours","slice","getMinutes","getSeconds","_this2","log","objectives","guilds","entryStyle","logRev","concat","reverse","filter","entry","rowStyle","ownerStyle","fontWeight","owner","type","parseDate","flipped","objectiveId","claimed","claimed_by","tag","MatchupStats","expanded","id","elem","document","getElementById","select","execCommand","console","matchup","tick","kills","deaths","i","length","objective","toLowerCase","points_tick","classNames","statsContainer","statsContainerExpanded","Button_default","onClick","setState","KeyboardArrowRight_default","KeyboardArrowLeft_default","victory_points","Math","round","scores","Options","getFullYear","axios","require","gw2apiModels_Gw2Worlds","lang","get","result","data","RequestHandler","config","retry","url","tryCnt","timeout","Error","_context","t0","gw2apiModels_Gw2Guild","Gw2Guild","request","parseFlippedTime","diff","getTime","hours","minutes","floor","str","componentWillReceivePropsCheck","nextProps","nextState","thisProps","thisState","changeState","undefined","newOwner","thisObjective","mapOld","idOld","matchupOld","pulse","setTimeout","ObjectiveTooltip","Tooltip_default","classes","tooltip","title","placement","children","Camp","_classNames3","claimedBy","pointsTick","_thisObjective","last_flipped","yaks_delivered","guildImage","replace","height","ObjectiveTooltip_ObjectiveTooltip","defineProperty","React","Tower","pulse1","pulse2","Keep","Castle","App","ready","region","tier","skirmish","skirmishStart","objectivesLastFlipped","objectivesLastClaimed","matchupLog","Gw2Worlds","getAll","newMatchup","getMatchup","start_time","skirmishes","startTime","mapId","claimed_at","getById","guild","skipFlipped","now","flippedBeforeSec","claimedBeforeSec","parseInt","alert","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","next","done","match","all_worlds","includes","selectedMatch","matchId","split","_this3","WorldSelector_WorldSelector","MatchupLog_MatchupLog","MatchupStats_MatchupStats","Options_Options","Camp_Camp","Tower_Tower","Keep_Keep","Castle_Castle","Boolean","window","location","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.615d8889.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport amber from '@material-ui/core/colors/amber';\r\n\r\nimport './main.css';\r\n\r\nfunction Transition(props) {\r\n  return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nexport default class FullScreenDialog extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            open : false,\r\n        }\r\n    }\r\n    \r\n    parseDate(dateObj) {\r\n        if(typeof dateObj === 'string')\r\n            dateObj = new Date(dateObj);\r\n        \r\n        return (dateObj.getFullYear()) + '-' + ('00' + (dateObj.getMonth() + 1)).slice(-2)  + '-' + ('00' + dateObj.getDate()).slice(-2);\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open : true});\r\n    }\r\n    \r\n    handleClose() {\r\n        console.log('close')\r\n        this.setState({open : false});\r\n    }\r\n\r\n    render() {\r\n        let { worlds, linkedWorlds, matchup } = this.props;\r\n\r\n        let worldNamesGreen = linkedWorlds.green.map((value, index) => {\r\n            return worlds[value].name;\r\n        });\r\n        let worldNamesBlue = linkedWorlds.blue.map((value, index) => {\r\n            return worlds[value].name;\r\n        });\r\n        let worldNamesRed = linkedWorlds.red.map((value, index) => {\r\n            return worlds[value].name;\r\n        });\r\n        \r\n        let { id } = matchup;\r\n        let [region, tier] = id.split('-');\r\n        let maps = {};\r\n\r\n        for(let i = 0; i < matchup.maps.length; i++)\r\n            maps[matchup.maps[i].type] = matchup.maps[i];\r\n\r\n        console.log(maps, maps.Center.kills.green);\r\n\r\n        let colors = ['red', 'blue', 'green'];\r\n        let mapsOrdered = {};\r\n        let rgbaColor = {\r\n            'red' : '210, 7, 7',\r\n            'blue' : '90, 117, 255',\r\n            'green' : '33, 202, 33'\r\n        };\r\n        for(let i = 0; i < colors.length; i++) {\r\n            let color = colors[i];\r\n            let rows = [];\r\n            for(let mapId in maps) {\r\n                let name;\r\n                switch(mapId) {\r\n                    case 'Center' : name = 'EBG'; break;\r\n                    case 'GreenHome' : name = 'GBL'; break;\r\n                    case 'BlueHome' : name = 'BBL'; break;\r\n                    case 'RedHome' : name = 'RBL'; break;\r\n                    default: break;\r\n                }\r\n\r\n                let row = (\r\n                    <tr>\r\n                        <td>{name}</td>\r\n                        <td>\r\n                            <div className=\"killsDeathsChip\">\r\n                                <span className={`chipLeft`} style={{ backgroundColor : `rgba(${rgbaColor[color]}, ${maps[mapId].kills[color] / (maps[mapId].kills[color] + maps[mapId].deaths[color])})`, width : maps[mapId].kills[color] / (maps[mapId].kills[color] + maps[mapId].deaths[color]) * 100 + '%'}}>{maps[mapId].kills[color]}</span>\r\n                                <span className={`chipRight`} style={{ backgroundColor : `rgba(${rgbaColor[color]}, ${maps[mapId].deaths[color] / (maps[mapId].kills[color] + maps[mapId].deaths[color])})`, width : maps[mapId].deaths[color] / (maps[mapId].kills[color] + maps[mapId].deaths[color]) * 100 + '%'}}>{maps[mapId].deaths[color]}</span>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <div className={`customChip ${color}Bg`}>{Math.round(maps[mapId].kills[color] / maps[mapId].deaths[color] * 100) / 100}</div>\r\n                        </td>\r\n                        <td>\r\n                            <div className={`customChip ${color}Bg`}>{Math.round(maps[mapId].kills[color] * 2 / maps[mapId].scores[color] * 10000) / 100 + '%'}</div>\r\n                        </td>\r\n                    </tr>\r\n                );\r\n                rows.push(row);\r\n            }\r\n\r\n            let table = (\r\n                <table className=\"detailedStatsTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Border</th>\r\n                            <th>Kills / Deaths</th>\r\n                            <th>KDR</th>\r\n                            <th>PPK</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>     \r\n                        {rows}\r\n                        <tr>\r\n                            <td>Total</td>\r\n                            <td>\r\n                                <div className=\"killsDeathsChip\">\r\n                                    <span className=\"chipLeft\" style={{ backgroundColor : `rgba(${rgbaColor[color]}, ${matchup.kills[color] / (matchup.kills[color] + matchup.deaths[color])})`, width : matchup.kills[color] / (matchup.kills[color] + matchup.deaths[color]) * 100 + '%'}}>{matchup.kills[color]}</span>\r\n                                    <span className=\"chipRight\" style={{ backgroundColor : `rgba(${rgbaColor[color]}, ${matchup.deaths[color] / (matchup.kills[color] + matchup.deaths[color])})`, width : matchup.deaths[color] / (matchup.kills[color] + matchup.deaths[color]) * 100 + '%'}}>{matchup.deaths[color]}</span>\r\n                                </div>       \r\n                            </td>\r\n                            <td>\r\n                                <div className={`customChip ${color}Bg`}>{Math.round(matchup.kills[color] / matchup.deaths[color] * 100) / 100}</div></td>\r\n                            <td>\r\n                                <div className={`customChip ${color}Bg`}>{Math.round(matchup.kills[color] * 2 / matchup.scores[color] * 10000) / 100 + '%'}</div>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            );\r\n\r\n            mapsOrdered[color] = table;\r\n        }\r\n\r\n        return (\r\n            <div style={{textAlign:'right'}}>\r\n              <Button onClick={() => {this.handleClickOpen()}} style={{color:'white'}}>Detailed Stats</Button>\r\n              <Dialog style={{ padding : '20px'}} fullWidth={true} maxWidth={'lg'} open={this.state.open} onClose={() => {this.handleClose()}} TransitionComponent={Transition}>   \r\n                    <DialogContent>    \r\n                        <h2>{this.parseDate(new Date(matchup.start_time))} to {this.parseDate(new Date(matchup.end_time))} {parseInt(region, 10) === 2 ? \"EU\" : \"NA\"} Tier {tier}</h2>\r\n                        <div className=\"detailedStatsContainer\">\r\n                            <Grid container spacing={16}>\r\n                                <Grid item xs={12} md={4}>\r\n                                    <div className=\"serverName green\">{worldNamesGreen.join(' & ')}</div>\r\n                                    {mapsOrdered.green}\r\n                                </Grid>\r\n                                <Grid item xs={12} md={4}>\r\n                                    <div className=\"serverName blue\">{worldNamesBlue.join(' & ')}</div>\r\n                                    {mapsOrdered.blue}\r\n                                </Grid>\r\n                                <Grid item xs={12} md={4}>\r\n                                    <div className=\"serverName red\">{worldNamesRed.join(' & ')}</div>\r\n                                    {mapsOrdered.red}\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </DialogContent>  \r\n              </Dialog>\r\n            </div>\r\n          );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport DetailedMatchupStats from './../DetailedMatchupStats';\r\n\r\nconst style = {\r\n    selectorContainer : {\r\n        position : 'fixed',\r\n        top : '0px',\r\n        left : '0px',\r\n        padding : '10px',\r\n        background : 'rgba(0,0,0,0.3)',\r\n        borderBottomRightRadius : '10px',\r\n        textAlign : 'left',\r\n        color : 'white',\r\n        fontSize : '12pt',\r\n    },\r\n    worldContainer :  {\r\n        position : 'fixed',\r\n        top : '0px',\r\n        left : '0px',\r\n        padding : '10px',\r\n        background : 'rgba(0,0,0,0.3)',\r\n        textAlign : 'left',\r\n        color : '#efefef',\r\n        fontSize : '12pt',\r\n        minWidth : '300px',\r\n        zIndex : 100\r\n    },\r\n}\r\n\r\nexport default class WorldSelector extends Component {\r\n    render() {\r\n        let { worlds, world, setWorld, linkedWorlds, color } = this.props;\r\n\r\n        let worldMenuItems = [];\r\n        worldMenuItems.push((<option key={0} value={0}>{'Choose a world'}</option>))\r\n        for(let worldId in worlds) {\r\n            let world = worlds[worldId];\r\n            worldMenuItems.push((<option key={worldId} value={worldId}>{world.name}</option>))\r\n        }\r\n\r\n        if(world) {\r\n\r\n            let worldNamesGreen = linkedWorlds.green.map((value, index) => {\r\n                return worlds[value].name;\r\n            });\r\n            let worldNamesBlue = linkedWorlds.blue.map((value, index) => {\r\n                return worlds[value].name;\r\n            });\r\n            let worldNamesRed = linkedWorlds.red.map((value, index) => {\r\n                return worlds[value].name;\r\n            });\r\n            \r\n            let homeServer = (<img src=\"/img/World_Completion.png\" alt=\"homeServer\" style={{ verticalAlign : 'middle', width : '20px', marginRight : '5px'}}/>);\r\n            let spanStyle = {\r\n                fontSize : '20px',\r\n                lineHeight : '30px',\r\n                verticalAlign : 'middle',\r\n                textShadow : 'rgb(0, 0, 0) -1px 0px 1px, rgb(0, 0, 0) 1px 0px 1px, rgb(0, 0, 0) 0px 1px 1px, rgb(0, 0, 0) 0px -1px 1px',\r\n            };\r\n            return (\r\n                <div style={style.worldContainer}>\r\n                    <div className=\"green\">\r\n                        {color === 'green' ? homeServer : \"\"}<span style={spanStyle}>{worldNamesGreen.join(' & ')}</span>\r\n                    </div>\r\n                    <div className=\"blue\">\r\n                        {color === 'blue' ? homeServer : \"\"}<span style={spanStyle}>{worldNamesBlue.join(' & ')}</span>\r\n                    </div>\r\n                    <div className=\"red\">\r\n                        {color === 'red' ? homeServer : \"\"}<span style={spanStyle}>{worldNamesRed.join(' & ')}</span>\r\n                    </div>\r\n                </div>\r\n            )\r\n            //<DetailedMatchupStats color={this.props.color} worlds={this.props.worlds} linkedWorlds={this.props.linkedWorlds} world={this.props.world} matchup={this.props.matchup}/>\r\n        } else {           \r\n            return (\r\n                <div style={style.selectorContainer}>\r\n                    <h3>Guild Wars 2 WvW Live Map</h3>\r\n                    <FormControl variant=\"outlined\" style={{ width : '250px' }}>\r\n                        <Select native value={\"dwadawdawd\"} onChange={(e) => {setWorld(e.target.value)}}>\r\n                            {worldMenuItems}\r\n                        </Select>\r\n                    </FormControl>     \r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nconst style = {\r\n    logContainer : {\r\n        position : 'fixed',\r\n        bottom : '0px',\r\n        right : '0px',\r\n        maxHeight : '150px',\r\n        width : '500px',\r\n        overflowY : 'auto',\r\n        textAlign : 'left',\r\n        color : '#efefef',\r\n        fontSize : '12pt',\r\n        zIndex : 100\r\n    }\r\n}\r\n\r\nexport default class MatchupLog extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            maps : {\r\n                'BlueHome' : 'BBL',\r\n                'GreenHome' : 'GBL',\r\n                'RedHome' : 'RBL',\r\n                'Center' : 'EBG',\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDate(dateObj) {\r\n        if(typeof dateObj === 'string')\r\n            dateObj = new Date(dateObj);\r\n        \r\n        return ('00' + dateObj.getHours()).slice(-2) + ':' + ('00' + dateObj.getMinutes()).slice(-2)  + ':' + ('00' + dateObj.getSeconds()).slice(-2);\r\n    }\r\n\r\n    render() {\r\n        let { world, log, objectives, guilds } = this.props;\r\n        let { maps } = this.state;\r\n\r\n        let entryStyle = {\r\n            fontSize : '13px',\r\n            background : 'rgba(0,0,0,0.5)',\r\n            padding : '5px',\r\n            color : 'white',\r\n            textShadow: '-1px 0 1px #000, 1px 0 1px #000, 0 1px 1px #000, 0 -1px 1px #000'\r\n        };\r\n\r\n        if(world) {\r\n            let logDup = [].concat(log);\r\n            let logRev = logDup.reverse().filter((entry, index) => {\r\n                if(index < 50)\r\n                    return entry;\r\n            });\r\n            \r\n            return (\r\n                <div style={style.logContainer}>\r\n                    {logRev.map((entry, index) => {\r\n\r\n                        let rowStyle = Object.assign({}, entryStyle);\r\n                        let ownerStyle = {\r\n                            fontWeight : 700,\r\n                        };\r\n\r\n                        switch(entry.map) {\r\n                            case \"RedHome\" : rowStyle.background = \"#ff000020\"; break;\r\n                            case \"BlueHome\" : rowStyle.background = \"#0000ff20\"; break;\r\n                            case \"GreenHome\" : rowStyle.background = \"#00ff0020\"; break;\r\n                            case \"Center\" : rowStyle.background = \"#ffffff20\"; break;\r\n                            default: break;\r\n                        }\r\n\r\n                        switch(entry.owner) {\r\n                            case \"Red\" : ownerStyle.color = \"red\"; break;\r\n                            case \"Blue\" : ownerStyle.color = \"blue\"; break;\r\n                            case \"Green\" : ownerStyle.color = \"green\"; break;\r\n                            default: break;\r\n                        }\r\n\r\n                        if(entry.type === 'flipped')\r\n                            return (<div style={rowStyle}>{maps[entry.map]}: {this.parseDate(entry.flipped)} - <span style={ownerStyle}>{entry.owner}</span> flipped <strong>{objectives[entry.objectiveId].name}</strong></div>)\r\n                        else\r\n                            return (<div style={rowStyle}>{maps[entry.map]}: {this.parseDate(entry.claimed)} - <span style={ownerStyle}>{guilds[entry.claimed_by].name} [{guilds[entry.claimed_by].tag}]</span> claimed <strong>{objectives[entry.objectiveId].name}</strong></div>)\r\n                    })}\r\n                    <div style={entryStyle}>Service started.</div>\r\n                </div>\r\n            )\r\n        } else {           \r\n            return (\r\n                <div style={style.logContainer}>\r\n                   \r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport ArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport classNames from 'classnames';\r\nimport './main.css';\r\n\r\nexport default class MatchupStats extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            expanded : true\r\n        }\r\n    }\r\n\r\n    parseDate(dateObj) {\r\n        if(typeof dateObj === 'string')\r\n            dateObj = new Date(dateObj);\r\n        \r\n        return ('00' + dateObj.getHours()).slice(-2) + ':' + ('00' + dateObj.getMinutes()).slice(-2)  + ':' + ('00' + dateObj.getSeconds()).slice(-2);\r\n    }\r\n\r\n    copyToClipboard(id) {\r\n        let elem = document.getElementById(id);\r\n        if(!elem) {\r\n            console.log(id, elem);\r\n            return;\r\n        }\r\n        elem.select();\r\n        document.execCommand(\"copy\");\r\n    }\r\n\r\n    render() {\r\n        let { world, matchup, linkedWorlds, color, worlds } = this.props;\r\n\r\n        \r\n        if(world) {\r\n\r\n            console.log(matchup);\r\n\r\n        let tick = {\r\n            'red' : 0,\r\n            'blue' : 0,\r\n            'green' : 0,\r\n        };\r\n\r\n        let kills = {\r\n            'red' : matchup.kills.red,\r\n            'blue' : matchup.kills.blue,\r\n            'green' : matchup.kills.green,\r\n        };\r\n\r\n        let deaths = {\r\n            'red' : matchup.deaths.red,\r\n            'blue' : matchup.deaths.blue,\r\n            'green' : matchup.deaths.green\r\n        }\r\n\r\n        let worldNamesGreen = linkedWorlds.green.map((value, index) => {\r\n            return worlds[value].name;\r\n        });\r\n        let worldNamesBlue = linkedWorlds.blue.map((value, index) => {\r\n            return worlds[value].name;\r\n        });\r\n        let worldNamesRed = linkedWorlds.red.map((value, index) => {\r\n            return worlds[value].name;\r\n        });\r\n\r\n        let homeServer = (<img src=\"/img/World_Completion.png\" alt=\"homeServer\" style={{ verticalAlign : 'middle', width : '20px', marginRight : '5px'}}/>);\r\n\r\n        for(let i = 0; i < matchup.maps.length; i++) {\r\n            let map = matchup.maps[i];\r\n            for(let a = 0; a < map.objectives.length; a++) {\r\n                let objective = map.objectives[a];\r\n                tick[objective.owner.toLowerCase()] += objective.points_tick;\r\n            }\r\n        }\r\n\r\n        return (\r\n                <div className={classNames({\r\n                    \"statsContainer\" : true,\r\n                    \"statsContainerExpanded\" : this.state.expanded\r\n                })}>\r\n                    <div className=\"floatLeft statsExpander\">\r\n                        <Button onClick={() => {\r\n                            this.setState({\r\n                                expanded : !this.state.expanded\r\n                            })\r\n                        }}>\r\n                            {this.state.expanded ? <ArrowRight/> : <ArrowLeft/>}\r\n                        </Button>\r\n                    </div>\r\n                    <table className=\"floatLeft statsTable\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Server</th>\r\n                                    <th>VP</th>\r\n                                    <th>Tick</th>\r\n                                    <th>Kills</th>\r\n                                    <th>Deaths</th>\r\n                                    <th>KDR</th>\r\n                                    <th>PPK</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"green\">\r\n                                            {color === 'green' ? homeServer : \"\"}<span>{worldNamesGreen.join(' & ')}</span>\r\n                                        </div>  \r\n                                    </td>\r\n                                    <td>\r\n                                        {matchup.victory_points.green}\r\n                                    </td>\r\n                                    <td>\r\n                                        {tick.green}\r\n                                    </td>\r\n                                    <td>\r\n                                        {kills.green}\r\n                                    </td>\r\n                                    <td>\r\n                                        {deaths.green}\r\n                                    </td>\r\n                                    <td>\r\n                                        {Math.round(kills.green / deaths.green * 100) / 100 }\r\n                                    </td>\r\n                                    <td>\r\n                                        {Math.round(kills.green * 2 / matchup.scores.green * 10000) / 100 }%\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"blue\">\r\n                                            {color === 'blue' ? homeServer : \"\"}<span>{worldNamesBlue.join(' & ')}</span>\r\n                                        </div>  \r\n                                    </td>\r\n                                    <td>\r\n                                        {matchup.victory_points.blue}\r\n                                    </td>\r\n                                    <td>\r\n                                        {tick.blue}\r\n                                    </td>\r\n                                    <td>\r\n                                        {kills.blue}\r\n                                    </td>\r\n                                    <td>\r\n                                        {deaths.blue}\r\n                                    </td>\r\n                                    <td>\r\n                                        {Math.round(kills.blue / deaths.blue * 100) / 100 }\r\n                                    </td>\r\n                                    <td>\r\n                                        {Math.round(kills.blue * 2 / matchup.scores.blue * 10000) / 100 }%\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"red\">\r\n                                            {color === 'red' ? homeServer : \"\"}<span>{worldNamesRed.join(' & ')}</span>\r\n                                        </div>  \r\n                                    </td>\r\n                                    <td>\r\n                                        {matchup.victory_points.red}\r\n                                    </td>\r\n                                    <td>\r\n                                        {tick.red}\r\n                                    </td>\r\n                                    <td>\r\n                                        {kills.red}\r\n                                    </td>\r\n                                    <td>\r\n                                        {deaths.red}\r\n                                    </td>\r\n                                    <td>\r\n                                        {Math.round(kills.red / deaths.red * 100) / 100 }\r\n                                    </td>\r\n                                    <td>\r\n                                        {Math.round(kills.red * 2 / matchup.scores.red * 10000) / 100 }%\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                </div>\r\n            )\r\n        } else {           \r\n            return (\r\n                <div></div>\r\n            );\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport './main.css';\r\n\r\nexport default class Options extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    parseDate(dateObj) {\r\n        if(typeof dateObj === 'string')\r\n            dateObj = new Date(dateObj);\r\n        \r\n        return ('00' + dateObj.getHours()).slice(-2) + ':' + ('00' + dateObj.getMinutes()).slice(-2)  + ':' + ('00' + dateObj.getSeconds()).slice(-2);\r\n    }\r\n\r\n    render() {\r\n\r\n        let { world } = this.props;\r\n            return (\r\n                <div className=\"options\">\r\n                    \r\n                    <div className=\"copyright\">© 2018 - {new Date().getFullYear()} - Legendary Dragonus.9734</div>\r\n                </div>\r\n                //<Button>FAQ</Button> - <Button>Changelog</Button> - <Button>Options</Button>\r\n            )\r\n\r\n    }\r\n}","const axios = require('axios');\r\n\r\nclass Gw2Worlds {\r\n    async getById(id, lang = 'en') {\r\n        let result = await axios.get(`https://api.guildwars2.com/v2/worlds?lang=${lang}&id=${id}`);\r\n        return result.data;\r\n    }\r\n\r\n    async getAll(lang = 'en') {\r\n        let result = await axios.get(`https://api.guildwars2.com/v2/worlds?lang=${lang}&ids=all`);\r\n        return result.data;\r\n    }\r\n}\r\n\r\nexport default new Gw2Worlds();","import axios from 'axios';\r\n\r\nexport default class RequestHandler {\r\n    constructor(config) {\r\n        this.config = Object.assign({\r\n            retry : 3\r\n        }, config);\r\n    }\r\n\r\n    async get(url, tryCnt = 0) {\r\n        try {\r\n            let result = await axios.get(url, {\r\n                timeout : 5000\r\n            });\r\n            return result.data;\r\n        } catch(error) {\r\n            if(tryCnt < this.config.retry - 1) \r\n                return await this.get(url, ++tryCnt)\r\n            else\r\n                return new Error(error);\r\n        }\r\n    }\r\n\r\n    post() {}\r\n\r\n    put() {}\r\n\r\n    delete() {}\r\n}","import RequestHandler from './../lib/RequestHandler';\r\n\r\nclass Gw2Guild {\r\n    constructor() {\r\n        this.request = new RequestHandler();\r\n    }\r\n\r\n    async getById(id, lang = 'en') {\r\n        let result = await this.request.get(`https://api.guildwars2.com/v2/guild/${id}?lang=${lang}`);\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\nexport default new Gw2Guild();","\r\n    export function parseDate(dateObj) {\r\n        if(typeof dateObj === 'string')\r\n            dateObj = new Date(dateObj);\r\n        \r\n        return ('00' + dateObj.getHours()).slice(-2) + ':' + ('00' + dateObj.getMinutes()).slice(-2)  + ':' + ('00' + dateObj.getSeconds()).slice(-2);\r\n    }\r\n\r\n    export function parseFlippedTime(dateObj) {\r\n        if(typeof dateObj === 'string')\r\n            dateObj = new Date(dateObj);\r\n        \r\n        let now = new Date();\r\n        let diff = now.getTime() - dateObj.getTime();\r\n        diff /= 1000;\r\n        let hours = 0, minutes = 0;\r\n        if(diff > 3600) {\r\n            hours = Math.floor(diff / 3600);\r\n            diff = diff % 3600;\r\n        }\r\n        if(diff > 60) {\r\n            minutes = Math.floor(diff / 60);\r\n            diff = diff % 60;\r\n        }\r\n\r\n        let str = '';\r\n\r\n        if(hours)\r\n            str += `${hours} hours`;\r\n\r\n        if(hours && minutes)\r\n            str += ' and';\r\n\r\n        str += ` ${minutes} minutes`;\r\n        return str;\r\n    }\r\n\r\n    export function componentWillReceivePropsCheck(nextProps, nextState, thisProps, thisState, changeState) {\r\n        if(thisProps.matchup.id === undefined)\r\n            return;\r\n\r\n        let { map, id, matchup } = nextProps;\r\n        let owner;\r\n        let newOwner;\r\n        if(matchup.maps) {\r\n            let thisObjective;\r\n            for(let i = 0; i < matchup.maps.length; i++)\r\n                if(matchup.maps[i].type === map) {\r\n                    for(let a = 0; a < matchup.maps[i].objectives.length; a++)\r\n                        if(matchup.maps[i].objectives[a].id === id)\r\n                            thisObjective = matchup.maps[i].objectives[a];\r\n                }\r\n\r\n            owner = thisObjective.owner;\r\n        }\r\n\r\n        let mapOld = thisProps.map;\r\n        let idOld = thisProps.id;\r\n        let matchupOld = thisProps.matchup;\r\n\r\n        if(matchupOld.maps) {\r\n            let thisObjective;\r\n            for(let i = 0; i < matchupOld.maps.length; i++)\r\n                if(matchupOld.maps[i].type === mapOld) {\r\n                    for(let a = 0; a < matchupOld.maps[i].objectives.length; a++)\r\n                        if(matchupOld.maps[i].objectives[a].id === idOld)\r\n                            thisObjective = matchupOld.maps[i].objectives[a];\r\n                }\r\n\r\n            newOwner = thisObjective.owner;\r\n        }\r\n\r\n        if(owner !== newOwner) {\r\n            changeState({ pulse : true });\r\n            setTimeout(() => {\r\n                changeState({ pulse : false });\r\n            }, 12000);\r\n        }\r\n    }\r\n","import React, { Component } from 'react';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport './main.css';\r\n\r\nexport default class ObjectiveTooltip extends Component {\r\n    render() {\r\n        return (\r\n            <Tooltip classes={{ tooltip : 'objectiveTooltip' }} title={(<div>{this.props.title}</div>)} placement=\"top\">\r\n                {this.props.children}\r\n            </Tooltip>\r\n            )\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport {parseFlippedTime, componentWillReceivePropsCheck} from './Objective';\r\nimport classNames from 'classnames';\r\nimport Tooltip from './../ObjectiveTooltip';\r\n\r\nexport default class Camp extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            pulse : false\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextState) {\r\n        componentWillReceivePropsCheck(nextProps, nextState, this.props, this.state, (state) => {\r\n            this.setState(state);\r\n        })\r\n    }\r\n\r\n    render() {   \r\n        console.log('render'); \r\n        let { map, objectives, id, matchup, top, left, guilds } = this.props;\r\n        let color = 'greyBg';\r\n        let pointsTick = 0;\r\n        let claimedBy;\r\n        let newOwner;\r\n        let tooltip = [];\r\n        \r\n        if(matchup.maps) {\r\n            let objective = objectives[id];\r\n            let thisObjective;\r\n            for(let i = 0; i < matchup.maps.length; i++)\r\n                if(matchup.maps[i].type === map) {\r\n                    for(let a = 0; a < matchup.maps[i].objectives.length; a++)\r\n                        if(matchup.maps[i].objectives[a].id === id)\r\n                            thisObjective = matchup.maps[i].objectives[a];\r\n                }\r\n\r\n            let { owner, points_tick, claimed_by, last_flipped, yaks_delivered } = thisObjective;\r\n            pointsTick = points_tick;\r\n            newOwner = owner;\r\n            claimedBy = claimed_by;\r\n            switch(owner) {\r\n                case 'Red' : color = 'redBg'; break;\r\n                case 'Blue' : color = 'blueBg'; break;\r\n                case 'Green' : color = 'greenBg'; break;\r\n                default : color = 'greyBg';\r\n            }\r\n\r\n            tooltip.push(<div key={objective.name}>{objective.name}</div>);\r\n            if(claimed_by && guilds[claimed_by]) {\r\n                let guild = guilds[claimed_by];\r\n                let guildImage = guild.name.replace(/ /g, '-');\r\n                tooltip.push(\r\n                    <div>\r\n                        <span>Claimed by:</span><br/>\r\n                        <div style={{height : '160px', width : '160px'}}><img src={`https://guilds.gw2w2w.com/guilds/${guildImage}/160.svg`} alt=\"Guild\"/></div>\r\n                        <span>{guilds[claimed_by].name} [{guilds[claimed_by].tag}]</span>\r\n                    </div>\r\n                );\r\n            }\r\n            tooltip.push(<div key={last_flipped}>Flipped {parseFlippedTime(new Date(last_flipped))} ago.</div>);\r\n            tooltip.push(<div key={yaks_delivered}>Dolyaks: {yaks_delivered} / 140</div>);\r\n            tooltip.push(<div key={points_tick}>Points per Tick: {points_tick}</div>);\r\n        }\r\n\r\n        return (\r\n            <Tooltip title={(<div>{tooltip}</div>)}>\r\n            <div className=\"objectiveContainer\" style={{\r\n                top : top,\r\n                left : left,\r\n            }}>\r\n                <div className={classNames({\r\n                    [`pulse1${newOwner}`] : this.state.pulse\r\n                })}/>\r\n                <div className={classNames({\r\n                    [`pulse2${newOwner}`] : this.state.pulse\r\n                })}/>\r\n                   <img className={classNames({\r\n                       [color] : true,\r\n                       'objective' : true\r\n                   })} src=\"/img/camp.png\" alt=\"Camp\"/>\r\n                   {pointsTick === 4 ? <img src=\"/img/Reinforced.png\" alt=\"Reinforced\" className=\"reinforced\"/> : \"\"}\r\n                   {pointsTick === 3 ? <img src=\"/img/Secured.png\" alt=\"Secured\" className=\"secured\"/> : \"\"}\r\n                   {claimedBy ? <img src=\"/img/claimed.png\" alt=\"claimed\" className=\"claimed\"/> : \"\"}\r\n                </div>\r\n                </Tooltip>\r\n            )\r\n\r\n    }\r\n}","import React from 'react';\r\nimport {parseFlippedTime, componentWillReceivePropsCheck} from './Objective';\r\nimport classNames from 'classnames';\r\nimport Tooltip from './../ObjectiveTooltip';\r\n\r\nexport default class Tower extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            pulse : false\r\n        }\r\n    }\r\n\r\n    static componentWillReceiveProps(nextProps, nextState) {\r\n        componentWillReceivePropsCheck(nextProps, nextState, this.props, this.state, (state) => {\r\n            this.setState(state);\r\n        })\r\n    }\r\n\r\n    render() {    \r\n        let { map, objectives, id, matchup, top, left, guilds } = this.props;\r\n        let color = 'greyBg';\r\n        let pointsTick = 0;\r\n        let claimedBy;\r\n        let newOwner;\r\n        let tooltip = [];\r\n        if(matchup.maps) {\r\n            let objective = objectives[id];\r\n            let thisObjective;\r\n            for(let i = 0; i < matchup.maps.length; i++)\r\n                if(matchup.maps[i].type === map) {\r\n                    for(let a = 0; a < matchup.maps[i].objectives.length; a++)\r\n                        if(matchup.maps[i].objectives[a].id === id)\r\n                            thisObjective = matchup.maps[i].objectives[a];\r\n                }\r\n\r\n            let { owner, points_tick, claimed_by, last_flipped, yaks_delivered } = thisObjective;\r\n            pointsTick = points_tick;\r\n            newOwner = owner;\r\n            claimedBy = claimed_by;\r\n            switch(owner) {\r\n                case 'Red' : color = 'redBg'; break;\r\n                case 'Blue' : color = 'blueBg'; break;\r\n                case 'Green' : color = 'greenBg'; break;\r\n                default : color = 'greyBg';\r\n            }\r\n\r\n            tooltip.push(<div key={objective.name}>{objective.name}</div>);\r\n            if(claimed_by && guilds[claimed_by]) {\r\n                let guild = guilds[claimed_by];\r\n                let guildImage = guild.name.replace(/ /g, '-');\r\n                tooltip.push(\r\n                    <div>\r\n                        <span>Claimed by:</span><br/>\r\n                        <div style={{height : '160px', width : '160px'}}><img src={`https://guilds.gw2w2w.com/guilds/${guildImage}/160.svg`} alt=\"Guild\"/></div>\r\n                        <span>{guilds[claimed_by].name} [{guilds[claimed_by].tag}]</span>\r\n                    </div>\r\n                );\r\n            }\r\n            tooltip.push(<div key={last_flipped}>Flipped {parseFlippedTime(new Date(last_flipped))} ago.</div>);\r\n            tooltip.push(<div key={yaks_delivered}>Dolyaks: {yaks_delivered} / 140</div>);\r\n            tooltip.push(<div key={points_tick}>Points per Tick: {points_tick}</div>);\r\n        }\r\n        let pulse1 = classNames({\r\n            [`pulse1${newOwner}`] : this.state.pulse\r\n        });\r\n\r\n        let pulse2 = classNames({\r\n            [`pulse2${newOwner}`] : this.state.pulse\r\n        });\r\n\r\n        return (\r\n            <Tooltip title={(<div>{tooltip}</div>)}>\r\n            <div className=\"objectiveContainer\" style={{\r\n                top : top,\r\n                left : left,\r\n            }}>\r\n                <div className={pulse1}/>\r\n                <div className={pulse2}/>\r\n                   <img className={classNames({\r\n                       [color] : true,\r\n                       'objective' : true\r\n                   })} src=\"/img/tower.png\" alt=\"Tower\"/>\r\n                   {pointsTick === 10 ? <img src=\"/img/Fortified.png\" alt=\"Fortified\" className=\"fortified\"/> : \"\"}\r\n                   {pointsTick === 8 ? <img src=\"/img/Reinforced.png\" alt=\"Reinforced\" className=\"reinforced\"/> : \"\"}\r\n                   {pointsTick === 6 ? <img src=\"/img/Secured.png\" alt=\"Secured\" className=\"secured\"/> : \"\"}\r\n                   {claimedBy ? <img src=\"/img/claimed.png\" alt=\"claimed\" className=\"claimed\"/> : \"\"}\r\n                </div>\r\n                </Tooltip>\r\n            )\r\n\r\n    }\r\n}","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Tooltip from './../ObjectiveTooltip';\r\nimport {parseFlippedTime, componentWillReceivePropsCheck} from './Objective';\r\n\r\nexport default class Keep extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            pulse : false\r\n        }\r\n    }\r\n\r\n    static componentWillReceiveProps(nextProps, nextState) {\r\n        componentWillReceivePropsCheck(nextProps, nextState, this.props, this.state, (state) => {\r\n            this.setState(state);\r\n        })\r\n    }\r\n\r\n    render() {    \r\n        let { map, objectives, id, matchup, top, left, guilds } = this.props;\r\n        let color = 'greyBg';\r\n        let pointsTick = 0;\r\n        let claimedBy;\r\n        let newOwner;\r\n        let tooltip = [];\r\n        if(matchup.maps) {\r\n            let objective = objectives[id];\r\n            let thisObjective;\r\n            for(let i = 0; i < matchup.maps.length; i++)\r\n                if(matchup.maps[i].type === map) {\r\n                    for(let a = 0; a < matchup.maps[i].objectives.length; a++)\r\n                        if(matchup.maps[i].objectives[a].id === id)\r\n                            thisObjective = matchup.maps[i].objectives[a];\r\n                }\r\n\r\n            let { owner, points_tick, claimed_by, last_flipped, yaks_delivered } = thisObjective;\r\n            pointsTick = points_tick;\r\n            newOwner = owner;\r\n            claimedBy = claimed_by;\r\n            switch(owner) {\r\n                case 'Red' : color = 'redBg'; break;\r\n                case 'Blue' : color = 'blueBg'; break;\r\n                case 'Green' : color = 'greenBg'; break;\r\n                default : color = 'greyBg';\r\n            }\r\n\r\n            tooltip.push(<div key={objective.name}>{objective.name}</div>);\r\n            if(claimed_by && guilds[claimed_by]) {\r\n                let guild = guilds[claimed_by];\r\n                let guildImage = guild.name.replace(/ /g, '-');\r\n                tooltip.push(\r\n                    <div>\r\n                        <span>Claimed by:</span><br/>\r\n                        <div style={{height : '160px', width : '160px'}}><img src={`https://guilds.gw2w2w.com/guilds/${guildImage}/160.svg`} alt=\"Guild\"/></div>\r\n                        <span>{guilds[claimed_by].name} [{guilds[claimed_by].tag}]</span>\r\n                    </div>\r\n                );\r\n            }\r\n            tooltip.push(<div key={last_flipped}>Flipped {parseFlippedTime(new Date(last_flipped))} ago.</div>);\r\n            tooltip.push(<div key={yaks_delivered}>Dolyaks: {yaks_delivered} / 140</div>);\r\n            tooltip.push(<div key={points_tick}>Points per Tick: {points_tick}</div>);\r\n        }\r\n\r\n        return (\r\n            <Tooltip title={(<div>{tooltip}</div>)}>\r\n            <div className=\"objectiveContainer\" style={{\r\n                    top : top,\r\n                    left : left,\r\n                }}>\r\n                    <div className={classNames({\r\n                        [`pulse1${newOwner}`] : this.state.pulse\r\n                    })}/>\r\n                    <div className={classNames({\r\n                        [`pulse2${newOwner}`] : this.state.pulse\r\n                    })}/>\r\n                    <img className={classNames({\r\n                        [color] : true,\r\n                        'objective' : true,\r\n                    })} src=\"/img/keep.png\" alt=\"Keep\"/>\r\n                    {pointsTick === 20 ? <img src=\"/img/waypoint.png\" alt=\"waypoint\" className=\"waypoint\"/> : \"\"}\r\n                    {pointsTick === 20 ? <img src=\"/img/Fortified.png\" alt=\"Fortified\" className=\"fortified\"/> : \"\"}\r\n                    {pointsTick === 16 ? <img src=\"/img/Reinforced.png\" alt=\"Reinforced\" className=\"reinforced\"/> : \"\"}\r\n                    {pointsTick === 12 ? <img src=\"/img/Secured.png\" alt=\"Secured\" className=\"secured\"/> : \"\"}\r\n                    {claimedBy ? <img src=\"/img/claimed.png\" alt=\"claimed\" className=\"claimed\"/> : \"\"}\r\n                </div>\r\n            </Tooltip>\r\n        )\r\n\r\n\r\n    }\r\n}","import React from 'react';\r\nimport {parseFlippedTime, componentWillReceivePropsCheck} from './Objective';\r\nimport classNames from 'classnames';\r\nimport Tooltip from './../ObjectiveTooltip';\r\n\r\nexport default class Castle extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            pulse : false\r\n        }\r\n    }\r\n\r\n    static componentWillReceiveProps(nextProps, nextState) {\r\n        componentWillReceivePropsCheck(nextProps, nextState, this.props, this.state, (state) => {\r\n            this.setState(state);\r\n        })\r\n    }\r\n\r\n    render() {    \r\n        let { map, objectives, id, matchup, top, left, guilds } = this.props;\r\n        let color = 'greyBg';\r\n        let pointsTick = 0;\r\n        let claimedBy;\r\n        let newOwner;\r\n        let tooltip = [];\r\n        if(matchup.maps) {\r\n            let objective = objectives[id];\r\n            let thisObjective;\r\n            for(let i = 0; i < matchup.maps.length; i++)\r\n                if(matchup.maps[i].type === map) {\r\n                    for(let a = 0; a < matchup.maps[i].objectives.length; a++)\r\n                        if(matchup.maps[i].objectives[a].id === id)\r\n                            thisObjective = matchup.maps[i].objectives[a];\r\n                }\r\n\r\n            let { owner, points_tick, claimed_by, last_flipped, yaks_delivered } = thisObjective;\r\n            pointsTick = points_tick;\r\n            newOwner = owner;\r\n            claimedBy = claimed_by;\r\n            switch(owner) {\r\n                case 'Red' : color = 'redBg'; break;\r\n                case 'Blue' : color = 'blueBg'; break;\r\n                case 'Green' : color = 'greenBg'; break;\r\n                default : color = 'greyBg';\r\n            }\r\n\r\n            tooltip.push(<div key={objective.name}>{objective.name}</div>);\r\n            if(claimed_by && guilds[claimed_by]) {\r\n                let guild = guilds[claimed_by];\r\n                let guildImage = guild.name.replace(/ /g, '-');\r\n                tooltip.push(\r\n                    <div>\r\n                        <span>Claimed by:</span><br/>\r\n                        <div style={{height : '160px', width : '160px'}}><img src={`https://guilds.gw2w2w.com/guilds/${guildImage}/160.svg`} alt=\"Guild\"/></div>\r\n                        <span>{guilds[claimed_by].name} [{guilds[claimed_by].tag}]</span>\r\n                    </div>\r\n                );\r\n            }\r\n            tooltip.push(<div key={last_flipped}>Flipped {parseFlippedTime(new Date(last_flipped))} ago.</div>);\r\n            tooltip.push(<div key={yaks_delivered}>Dolyaks: {yaks_delivered} / 140</div>);\r\n            tooltip.push(<div key={points_tick}>Points per Tick: {points_tick}</div>);\r\n        }\r\n\r\n\r\n        return (\r\n            <Tooltip title={(<div>{tooltip}</div>)}>\r\n            <div className=\"objectiveContainer\" style={{\r\n                top : top,\r\n                left : left,\r\n            }}>\r\n                <div className={classNames({\r\n                    [`pulse1${newOwner}`] : this.state.pulse\r\n                })}/>\r\n                <div className={classNames({\r\n                    [`pulse2${newOwner}`] : this.state.pulse\r\n                })}/>\r\n                   <img className={classNames({\r\n                       [color] : true,\r\n                       'objective' : true\r\n                   })} src=\"/img/castle.png\" alt=\"Castle\"/>\r\n                    {pointsTick === 20 ? <img src=\"/img/waypoint.png\" alt=\"waypoint\" className=\"waypoint\"/> : \"\"}\r\n                    {pointsTick === 32 ? <img src=\"/img/Fortified.png\" alt=\"Fortified\" className=\"fortified\"/> : \"\"}\r\n                    {pointsTick === 24 ? <img src=\"/img/Reinforced.png\" alt=\"Reinforced\" className=\"reinforced\"/> : \"\"}\r\n                    {pointsTick === 16 ? <img src=\"/img/Secured.png\" alt=\"Secured\" className=\"secured\"/> : \"\"}\r\n                   {claimedBy ? <img src=\"/img/claimed.png\" alt=\"claimed\" className=\"claimed\"/> : \"\"}\r\n                </div>\r\n                </Tooltip>\r\n            )\r\n\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport WorldSelector from './components/WorldSelector';\nimport MatchupLog from './components/MatchupLog';\nimport MatchupStats from './components/MatchupStats';\nimport Options from './components/Options';\nimport Gw2Worlds from './gw2apiModels/Gw2Worlds';\nimport Gw2Guild from './gw2apiModels/Gw2Guild';\n\nimport RequestHandler from './lib/RequestHandler';\n\nimport Camp from './components/Objectives/Camp';\nimport Tower from './components/Objectives/Tower';\nimport Keep from './components/Objectives/Keep';\nimport Castle from './components/Objectives/Castle';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            objectives : {},\n            guilds : {},\n            world : 0,\n            linkedWorlds : [],\n            worlds : {},\n            ready : 0,\n            region : 0,\n            tier : 0,\n            color : '',\n            matchup : {},\n            skirmish : {},\n            skirmishStart : 0,\n            timeout : null,\n            objectivesLastFlipped : {},\n            objectivesLastClaimed : {},\n            matchupLog : [],\n        };\n        this.request = new RequestHandler();\n    }\n\n    async componentDidMount() {\n        let result = await Gw2Worlds.getAll();\n        let worlds = {};\n        for(let index in result) {\n            let world = result[index];\n            worlds[world.id] = world;\n        }\n\n        result = await this.request.get(`https://api.guildwars2.com/v2/wvw/objectives?ids=all&lang=en`);\n        let objectives = {};\n\n        for(let index in result) {\n            let objective = result[index];\n            objectives[objective.id] = objective;\n        }\n\n        this.setState({ worlds : worlds, objectives : objectives, ready : 1 });\n        //this.setWorld(2201);\n    }\n\n    async getMatchup() {\n        let { region, tier, matchup, world, objectivesLastClaimed, objectivesLastFlipped, matchupLog, guilds } = this.state;\n        let newMatchup, skirmishStart, skirmish;\n        if(region && tier) {\n            newMatchup = await this.request.get(`https://api.guildwars2.com/v2/wvw/matches?id=${region}-${tier}`);\n\n            if(newMatchup instanceof Error) {\n                let timeout = setTimeout(() => {\n                    this.getMatchup();\n                }, 10000);\n                this.setState({ timeout : timeout });\n                return;\n            }\n\n            if(matchup.start_time !== newMatchup.start_time) {\n                console.log('reset matchup');\n                // reset matchup\n                skirmish = newMatchup;\n                matchup = newMatchup;\n                this.setWorld(world);\n                return;\n            }\n\n            if(matchup.skirmishes.length !== newMatchup.skirmishes.length) {\n                console.log('reset skirmish');\n                skirmish = newMatchup;\n                matchup = newMatchup;\n            }\n\n            let { start_time, maps } = newMatchup;\n            let startTime = new Date(start_time);\n            skirmishStart = new Date(startTime.getTime() + ((newMatchup.skirmishes.length - 1) * 2 * 60 * 60 * 1000));\n            for(let mapId in maps) {\n                let map = maps[mapId];\n                let { objectives } = map;\n                for (let i = 0; i < objectives.length; i++) {\n                    let objective = objectives[i];\n                    let {\n                        id,\n                        owner,\n                        last_flipped,\n                        claimed_by,\n                        claimed_at\n                    } = objective;\n                    let index = `${id}`;\n    \n                    if(claimed_by && !guilds[claimed_by]) {\n                        let guild = await Gw2Guild.getById(claimed_by);\n                        guilds[claimed_by] = guild;\n                    }\n                    // last flipped\n                    let skipFlipped = false;\n                    if (!objectivesLastFlipped[index]) {\n                        objectivesLastFlipped[index] = new Date(last_flipped);\n                        if (claimed_at)\n                            objectivesLastClaimed[index] = new Date(claimed_at).getTime();\n                        skipFlipped = true;\n                    }\n    \n    \n                    if (objectivesLastFlipped[index].getTime() !== new Date(last_flipped).getTime() && !skipFlipped) {\n                        let now = new Date();\n                        let flippedBeforeSec = (now.getTime() - new Date(last_flipped).getTime()) / 1000;\n                        objectivesLastFlipped[index] = new Date(last_flipped);\n                        if (flippedBeforeSec < 0)\n                            flippedBeforeSec = 0;\n                        matchupLog.push({\n                            map : map.type,\n                            type : 'flipped',\n                            owner : owner,\n                            flipped : last_flipped,\n                            flippedBeforeSec : flippedBeforeSec,\n                            objectiveId : objective.id\n                        });\n                    }\n    \n                    if (claimed_at && !skipFlipped) {\n                        if (objectivesLastClaimed[index] !== new Date(claimed_at).getTime()) {\n                            let now = new Date();\n                            objectivesLastClaimed[index] = new Date(claimed_at).getTime();\n                            let claimedBeforeSec = (now.getTime() - objectivesLastClaimed[index]) / 1000;\n                            if (claimedBeforeSec < 0)\n                                claimedBeforeSec = 0;\n                            let guild = await Gw2Guild.getById(claimed_by);\n                            guilds[guild.id] = guild;\n                            matchupLog.push({\n                                map : map.type,\n                                type : 'claimed',\n                                owner : owner,\n                                claimed : claimed_at,\n                                claimed_by : claimed_by,\n                                claimedBeforeSec : claimedBeforeSec,\n                                objectiveId : objective.id\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n        let timeout = setTimeout(() => {\n            this.getMatchup();\n        }, 5000);\n\n        if(newMatchup)\n            this.setState({\n                matchup : newMatchup,\n                timeout : timeout,\n                skirmishStart : skirmishStart,\n                objectivesLastClaimed : objectivesLastClaimed,\n                objectivesLastFlipped : objectivesLastFlipped,\n                matchupLog : matchupLog,\n                guilds : guilds,\n            });\n        \n    }\n\n    async setWorld(id) {\n        id = parseInt(id, 10); \n        if(!id)\n            return;\n        let result = await this.request.get(`https://api.guildwars2.com/v2/wvw/matches?ids=all&_=${new Date().getTime()}`);\n        if(result.length === undefined || result instanceof Error) {\n            alert('There is a problem with the Guild Wars 2 API or your network connection.')\n            return;\n        }\n        let selectedMatch;\n        let color;\n        let linkedWorlds;\n        for(let match of result) {\n            let { all_worlds } = match;\n            let worlds = all_worlds.red.concat(all_worlds.blue, all_worlds.green);\n            if(worlds.includes(id)) {\n                selectedMatch = match;\n                if(all_worlds.red.includes(id))\n                    color = 'red';\n                else if(all_worlds.blue.includes(id))\n                    color = 'blue';\n                else if(all_worlds.green.includes(id))\n                    color = 'green';\n\n                linkedWorlds = all_worlds;\n            }\n        }\n\n        let matchId = selectedMatch.id;\n        let [region, tier] = matchId.split('-');\n\n        this.setState({ world : id, matchup : selectedMatch, region : region, tier : tier, skirmish : selectedMatch, color : color, linkedWorlds : linkedWorlds });\n        this.getMatchup();\n    }\n\n    resetWorld() {\n        this.setState({ world : 0 });\n    }\n\n    render() {\n\n        if(!this.state.ready)\n            return (\n                <div className=\"App\">\n                    <div style={{\n                        position : 'relative'\n                    }}>\n                        <img src={'/img/hybrid-1-desert-4096.jpg'} alt=\"\" style={{ width : '100%'}}/>\n                    </div>\n                </div>\n            );\n\n        return (\n            <div className=\"App\">\n                <div style={{\n                    position : 'relative'\n                }}>\n                    <WorldSelector color={this.state.color} linkedWorlds={this.state.linkedWorlds} world={this.state.world} worlds={this.state.worlds} setWorld={(id) => this.setWorld(id)} matchup={this.state.matchup}/>\n                    <MatchupLog objectives={this.state.objectives} world={this.state.world} log={this.state.matchupLog} guilds={this.state.guilds}/>\n                    <MatchupStats color={this.state.color} worlds={this.state.worlds} linkedWorlds={this.state.linkedWorlds} world={this.state.world} matchup={this.state.matchup}/>\n                    <Options world={this.state.world}/>\n                    <img src={'/img/hybrid-1-desert-4096.jpg'} alt=\"\" style={{ width : '100%'}}/>\n\n                    <div className=\"red-map\">\n                        <h2 className=\"redBorderHeading\">Red BL</h2>\n                        <Camp top={'13.5%'} left={'51%'} matchup={this.state.matchup} id={'1099-99'} objectives={this.state.objectives} map={'RedHome'} guilds={this.state.guilds}/>\n                        <Camp top={'18.2%'} left={'39%'} matchup={this.state.matchup} id={'1099-115'} objectives={this.state.objectives} map={'RedHome'} guilds={this.state.guilds}/>\n                        <Camp top={'19.8%'} left={'63.8%'} matchup={this.state.matchup} id={'1099-109'} objectives={this.state.objectives} map={'RedHome'} guilds={this.state.guilds}/>\n                        <Camp top={'35.5%'} left={'41%'} matchup={this.state.matchup} id={'1099-101'} objectives={this.state.objectives} map={'RedHome'} guilds={this.state.guilds}/>\n                        <Camp top={'36.7%'} left={'62.3%'} matchup={this.state.matchup} id={'1099-100'} objectives={this.state.objectives} map={'RedHome'} guilds={this.state.guilds}/>\n                        <Camp top={'42.7%'} left={'50.5%'} matchup={this.state.matchup} id={'1099-116'} objectives={this.state.objectives} map={'RedHome'} guilds={this.state.guilds}/>\n\n                        <Tower top={'13.5%'} left={'43%'} matchup={this.state.matchup} id={'1099-102'} objectives={this.state.objectives} map={'RedHome'} guilds={this.state.guilds}/>\n                        <Tower top={'15%'} left={'60.7%'} matchup={this.state.matchup} id={'1099-104'} objectives={this.state.objectives} map={'RedHome'} guilds={this.state.guilds}/>\n                        <Tower top={'38.9%'} left={'56.1%'} matchup={this.state.matchup} id={'1099-105'} objectives={this.state.objectives} map={'RedHome'} guilds={this.state.guilds}/>\n                        <Tower top={'36.5%'} left={'46.5%'} matchup={this.state.matchup} id={'1099-110'} objectives={this.state.objectives} map={'RedHome'} guilds={this.state.guilds}/>\n\n                        <Keep top={'21%'} left={'51.5%'} matchup={this.state.matchup} id={'1099-113'} objectives={this.state.objectives} map={'RedHome'} guilds={this.state.guilds}/>\n                        <Keep top={'27.5%'} left={'38.5%'} matchup={this.state.matchup} id={'1099-106'} objectives={this.state.objectives} map={'RedHome'} guilds={this.state.guilds}/>\n                        <Keep top={'28.5%'} left={'64%'} matchup={this.state.matchup} id={'1099-114'} objectives={this.state.objectives} map={'RedHome'} guilds={this.state.guilds}/>\n                    </div>\n                    \n                    <div className=\"blue-map\">\n                        <h2 className=\"blueBorderHeading\">Blue BL</h2>\n                        <Camp top={'34.5%'} left={'82%'} matchup={this.state.matchup} id={'96-39'} objectives={this.state.objectives} map={'BlueHome'} guilds={this.state.guilds}/>\n                        <Camp top={'47.5%'} left={'74%'} matchup={this.state.matchup} id={'96-52'} objectives={this.state.objectives} map={'BlueHome'} guilds={this.state.guilds}/>\n                        <Camp top={'47%'} left={'91.5%'} matchup={this.state.matchup} id={'96-51'} objectives={this.state.objectives} map={'BlueHome'} guilds={this.state.guilds}/>\n                        <Camp top={'64.5%'} left={'74.5%'} matchup={this.state.matchup} id={'96-53'} objectives={this.state.objectives} map={'BlueHome'} guilds={this.state.guilds}/>\n                        <Camp top={'63.5%'} left={'90.5%'} matchup={this.state.matchup} id={'96-50'} objectives={this.state.objectives} map={'BlueHome'} guilds={this.state.guilds}/>\n                        <Camp top={'71.5%'} left={'82.0%'} matchup={this.state.matchup} id={'96-34'} objectives={this.state.objectives} map={'BlueHome'} guilds={this.state.guilds}/>\n\n                        <Tower top={'45.5%'} left={'76.5%'} matchup={this.state.matchup} id={'96-38'} objectives={this.state.objectives} map={'BlueHome'} guilds={this.state.guilds}/>\n                        <Tower top={'45.5%'} left={'87.5%'} matchup={this.state.matchup} id={'96-40'} objectives={this.state.objectives} map={'BlueHome'} guilds={this.state.guilds}/>\n                        <Tower top={'63%'} left={'78.5%'} matchup={this.state.matchup} id={'96-35'} objectives={this.state.objectives} map={'BlueHome'} guilds={this.state.guilds}/>\n                        <Tower top={'63%'} left={'86.5%'} matchup={this.state.matchup} id={'96-36'} objectives={this.state.objectives} map={'BlueHome'} guilds={this.state.guilds}/>\n\n                        <Keep top={'50%'} left={'82%'} matchup={this.state.matchup} id={'96-37'} objectives={this.state.objectives} map={'BlueHome'} guilds={this.state.guilds}/>\n                        <Keep top={'57%'} left={'72.5%'} matchup={this.state.matchup} id={'96-33'} objectives={this.state.objectives} map={'BlueHome'} guilds={this.state.guilds}/>\n                        <Keep top={'56%'} left={'92.5%'} matchup={this.state.matchup} id={'96-32'} objectives={this.state.objectives} map={'BlueHome'} guilds={this.state.guilds}/>\n                    </div>\n\n                    <div className=\"green-map\">\n                        <h2 className=\"greenBorderHeading\">Green BL</h2>\n                        <Camp top={'43.5%'} left={'16.5%'} matchup={this.state.matchup} id={'95-39'} objectives={this.state.objectives} map={'GreenHome'} guilds={this.state.guilds}/>\n                        <Camp top={'55.5%'} left={'7.5%'} matchup={this.state.matchup} id={'95-52'} objectives={this.state.objectives} map={'GreenHome'} guilds={this.state.guilds}/>\n                        <Camp top={'55.5%'} left={'25.5%'} matchup={this.state.matchup} id={'95-51'} objectives={this.state.objectives} map={'GreenHome'} guilds={this.state.guilds}/>\n                        <Camp top={'72.5%'} left={'8.5%'} matchup={this.state.matchup} id={'95-53'} objectives={this.state.objectives} map={'GreenHome'} guilds={this.state.guilds}/>\n                        <Camp top={'72%'} left={'24.5%'} matchup={this.state.matchup} id={'95-50'} objectives={this.state.objectives} map={'GreenHome'} guilds={this.state.guilds}/>\n                        <Camp top={'80.5%'} left={'16%'} matchup={this.state.matchup} id={'95-34'} objectives={this.state.objectives} map={'GreenHome'} guilds={this.state.guilds}/>\n\n                        <Tower top={'53.5%'} left={'10.5%'} matchup={this.state.matchup} id={'95-38'} objectives={this.state.objectives} map={'GreenHome'} guilds={this.state.guilds}/>\n                        <Tower top={'53.5%'} left={'21.5%'} matchup={this.state.matchup} id={'95-40'} objectives={this.state.objectives} map={'GreenHome'} guilds={this.state.guilds}/>\n                        <Tower top={'71%'} left={'12.5%'} matchup={this.state.matchup} id={'95-35'} objectives={this.state.objectives} map={'GreenHome'} guilds={this.state.guilds}/>\n                        <Tower top={'71%'} left={'20.5%'} matchup={this.state.matchup} id={'95-36'} objectives={this.state.objectives} map={'GreenHome'} guilds={this.state.guilds}/>\n\n                        <Keep top={'58.5%'} left={'16%'} matchup={this.state.matchup} id={'95-37'} objectives={this.state.objectives} map={'GreenHome'} guilds={this.state.guilds}/>\n                        <Keep top={'65.5%'} left={'6.5%'} matchup={this.state.matchup} id={'95-33'} objectives={this.state.objectives} map={'GreenHome'} guilds={this.state.guilds}/>\n                        <Keep top={'64%'} left={'26.5%'} matchup={this.state.matchup} id={'95-32'} objectives={this.state.objectives} map={'GreenHome'} guilds={this.state.guilds}/>\n                    </div>\n                    \n                    <div className=\"center-map\">\n                        <h2 className=\"ebgHeading\">EBG</h2>\n                        <Camp top={'64.5%'} left={'42.5%'} matchup={this.state.matchup} id={'38-6'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Camp top={'67.5%'} left={'56.5%'} matchup={this.state.matchup} id={'38-5'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Camp top={'75.5%'} left={'40.5%'} matchup={this.state.matchup} id={'38-10'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Camp top={'88.5%'} left={'46.5%'} matchup={this.state.matchup} id={'38-4'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Camp top={'90.5%'} left={'53.5%'} matchup={this.state.matchup} id={'38-7'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Camp top={'76.5%'} left={'59.5%'} matchup={this.state.matchup} id={'38-8'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n\n                        <Tower top={'63.5%'} left={'47%'} matchup={this.state.matchup} id={'38-17'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Tower top={'64.5%'} left={'54.5%'} matchup={this.state.matchup} id={'38-20'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Tower top={'69%'} left={'54%'} matchup={this.state.matchup} id={'38-19'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Tower top={'70.5%'} left={'46.5%'} matchup={this.state.matchup} id={'38-18'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n\n                        <Tower top={'80.5%'} left={'38.5%'} matchup={this.state.matchup} id={'38-11'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Tower top={'88.5%'} left={'43.5%'} matchup={this.state.matchup} id={'38-13'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Tower top={'84%'} left={'47.5%'} matchup={this.state.matchup} id={'38-13'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Tower top={'77.5%'} left={'44.5%'} matchup={this.state.matchup} id={'38-12'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n\n                        <Tower top={'86%'} left={'52.5%'} matchup={this.state.matchup} id={'38-16'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Tower top={'89.5%'} left={'57.5%'} matchup={this.state.matchup} id={'38-15'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Tower top={'80.5%'} left={'60.5%'} matchup={this.state.matchup} id={'38-22'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Tower top={'77.5%'} left={'56%'} matchup={this.state.matchup} id={'38-21'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n\n                        <Keep top={'66.5%'} left={'51.5%'} matchup={this.state.matchup} id={'38-1'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Keep top={'84.5%'} left={'41%'} matchup={this.state.matchup} id={'38-3'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                        <Keep top={'84.5%'} left={'58.5%'} matchup={this.state.matchup} id={'38-2'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n\n                        <Castle top={'77.5%'} left={'50%'} matchup={this.state.matchup} id={'38-9'} objectives={this.state.objectives} map={'Center'} guilds={this.state.guilds}/>\n                    </div>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}